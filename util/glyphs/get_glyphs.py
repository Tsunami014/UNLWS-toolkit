import json, pygame
import math

def get_glyph(name):
    try:
        return get_svg_glyph(name)
    except:
        try:
            return get_json_glyph(name)
        except:
            raise KeyError('No glyph named "%s" exists in either `glyphs.svg` or `glyphs.json`.' % name)

def parse(coords):
    origin = (min([i[0] for i in coords]), min([i[1] for i in coords]))
    s = pygame.Surface(max([i[0]-origin[0] for i in coords]), max([i[1]-origin[1] for i in coords]))
    pygame.draw.polygon(s, (255, 255, 255), [[i[0]-origin[0], i[1]-origin[1]] for i in coords], 10)
    return s

def get_json_glyph(name):
    with open('util/glyphs/glyphs/glyphs.json', 'r') as f:
        data = json.load(f)
        if name not in data.keys():
            raise KeyError('No glyph named "%s" exists.' % name)
    # parse data into coordinates
    out = [(0, 0)]
    rot = 0
    for i in data[name]:
        if i.startswith('.'):
            if i[1:].startswith('>'):
                rot = i[2:]
            elif i[1:].startswith('<'):
                rot = -i[2:]
            else:
                raise ValueError('Invalid rotation "%s".' % i)
        else:
            if i.startswith('>'):
                rot += i[1:]
            elif i.startswith('<'):
                rot -= i[1:]
            else:
                new_x = out[-1][0] + int(i) * math.cos(rot * math.pi / 180)
                new_y = out[-1][1] + int(i) * math.sin(rot * math.pi / 180)
                out.append((new_x, new_y))
    return parse(out)

def get_svg_glyph(name):
    with open('util/glyphs/glyphs/glyphs.svg', 'r') as f:
        isAdobe = 'Adobe Illustrator' in f.read() # it is included in a comment saying 'generated by Adobe Illustrator'
        if name not in f.read():
            raise KeyError('No glyph named "%s" exists.' % name)
    if isAdobe:
        from xml.dom import minidom
        doc = minidom.parse('util/glyphs/glyphs/glyphs.svg')
        elms = doc.getElementsByTagName('g')
        for i in elms:
            if i.getAttribute('id') == name:
                out = i.getElementsByTagName('polyline')[0].getAttribute('points') # dunno what the attribute 'class' is...
                break
        # here we parse 'out'
        out = out.split(' ')
        out = [i.split(',') for i in out if i != '']
    else: pass #TODO: implement this. Unsure if this is even needed, but OH WELL
    return parse(out)
